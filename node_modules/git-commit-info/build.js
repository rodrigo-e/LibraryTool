'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _execa = require('execa');

var _execa2 = _interopRequireDefault(_execa);

var _isGitRepository = require('is-git-repository');

var _isGitRepository2 = _interopRequireDefault(_isGitRepository);

var _os = require('os');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _pathIsAbsolute = require('path-is-absolute');

var _pathIsAbsolute2 = _interopRequireDefault(_pathIsAbsolute);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var processCwd = process.cwd();
var regex = /\s+([\s\S]*)/g; // matches everything after the first whitespace

var gitCommitInfo = function gitCommitInfo() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      cwd = _ref.cwd,
      commit = _ref.commit;

  var thisCommit = commit || '';

  var thisPath = cwd || processCwd;

  thisPath = (0, _pathIsAbsolute2.default)(thisPath) ? thisPath : _path2.default.join(cwd, thisPath);

  if (!(0, _isGitRepository2.default)(thisPath)) {
    return {};
  }

  try {
    var exec = void 0;

    if ((0, _os.platform)() === 'win32') {
      exec = _execa2.default.shellSync('pushd ' + thisPath + ' & git --no-pager show ' + thisCommit + ' --summary');
    } else {
      exec = _execa2.default.shellSync('(cd ' + thisPath + ' ; git --no-pager show ' + thisCommit + ' --summary)');
    }

    var info = exec.stdout.split('\n').filter(function (entry) {
      return entry.length !== 0;
    });

    var hash = new RegExp(regex).exec(info[0])[1];
    var shortHash = hash.slice(0, 7);
    var author = new RegExp(regex).exec(info[1])[1].match(/([^<]+)/)[1].trim();
    var email = new RegExp(regex).exec(info[1])[1].match(/<([^>]+)>/)[1];
    var date = new RegExp(regex).exec(info[2])[1];
    var message = exec.stdout.split('\n\n')[1].trim();

    return {
      hash: hash,
      shortHash: shortHash,
      commit: hash,
      shortCommit: shortHash,
      author: author,
      email: email,
      date: date,
      message: message
    };
  } catch (e) {
    return {};
  }
};

exports.default = gitCommitInfo;
module.exports = exports['default'];
